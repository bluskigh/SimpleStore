====
Flask-Flash
- used to give interactive feedback to user (error/success/info)
- flash message is created in one Flask View, but showed in the next view (called next)
- flash message is passed from one view to next view, along with the request.
flash(message, category)
"to get flsah message from the session, where it is stored, and display it on the templates, we use the get_flashed_messages()"
get_flashed_messages(with_categories, category_filter)
- all 2 params are optional

=====
An error when trying to get a value from the session dictionary.
session['userid'] <- error, let me explain why
1) session is stored as a dictionary
2) if a key does not exist in the dictionary when accessing via [], then an error occurs
3) using get() on a dictionary will not throw an error but returns None. 
4) In conclusion, i am a monke, and use .get() when trying to interact with dict

=======
Python decorators 
- provide simple syntax for calling higher-order functions
??? What is a higher order function?
a) A function that takes 1/more functions as arguments, and returns a function as a result
- decorater is a function that takes another function and extends the behavior of the latter function without explicitly modifying it.

Python functions are considered to be First-Class Objects
- functions can be passed around and used as arguments
- aside: used in functional programming too 

example-
def child(name):
  return 'Printing: ' + name
def child_two(name):
  return 'Printing two: ' + name
def parent(func):
  return func('programming')

Why are you not providing () to the function (when passing to parent)?
Because you do not want to call the function, but provide a pointer to the function in memory. Heap i believe. 

this is an example of what you get when you print out a function by its identifier only:
<function something at 0x7f2af709f310>

function identifier at location_in_memory

If we save that a variable we can call it whenever via a variable....weird? :D

Q) So in order to create a decorator function we have to pass the function in the params?
A) use the @ symbol

So where did I use this?
When checking on each route whether or not the user is currently signed in I would type:
if session.get("userid"):
  ....
else:
  ....
BUT BEFORE I IMPLEMENT THIS IN Flask I have to redirect you too: https://flask.palletsprojects.com/en/1.1.x/patterns/viewdecorators/
This article tells us that in order to decorate a router function, we have to pass the information in the default function, to the decorater function.

There is a tool that does this for us called functools.wraps:
from functools import wraps
- which is,,,, quickydinadink a decorater too

def login_required(f):
  @wraps(f)
  def wrapper(*args, **kwargs):
    if g.user is None:
      return redirect(url_for('login', next=request.url))
    return f(*args, **kwargs)      (Z)
  return wrapper 

q) Why do we return f(*args, **kwargs)?
a) The decorator function will "eat" the return statement, no but, since the decorater is not returning a value, its going to return None, so in order to return the value of the function that is being decorated, we need to call it with paremeters passed through. (Z)
Make sure the wrapper function returns the return value of the decoratoin function.

@route is the outermost decorator 

@@@@@@@@@@ functools wraps
- preserves information about the original function

introspection in computing is when a object knows about its properties at runtime.
For example, when you have a objects and call __name__ it would return the identifier of the function.

But when dealing with decorators and getting __name__ it is going to return the inner function information, which is not we want when deocratinga function, this is where we can use functools wraps to preserve infromation of the original function.

====
Setting the footer to be at the bottom of the page (with content)

Basic structure
div#container
  section#header
  section#body
  section#footer

In order for this to work, make sure that you have the body to have a height of 100%
html, body { height: 100%; }

The container should have a positoin of relative, this will be used later for the footer which willl be positioned at the bottom of the container, relatively to the container.

#container {
  min-height: 100%; <- makes sure that the height will be at 100%
  display: position;
}
#header {
....
}
#body {
  padding-bottom: 80px; <- the height of the footer
}
#footer {
  position: absolute;
  bottom: 0;
  height: 80px;
}
